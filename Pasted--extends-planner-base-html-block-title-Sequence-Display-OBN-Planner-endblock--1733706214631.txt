{% extends 'planner/base.html' %}

{% block title %}Sequence Display - OBN Planner{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<style>
    #map {
        height: 800px;
        /* Increase this value to make the map taller */
        width: 100%;
        /* This makes the map take up the full width of its container */
        margin-top: 20px;
    }

    .container {
        max-width: 95%;
        /* Increase the width of the main container if needed */
    }

    button-container {
        text-align: center;
        margin: 20px 0;
        padding: 10px;
    }

    .generate-button {
        background-color: #1a1a3a1;
        color: #3a1a1a;
        border: none;
        padding: 12px 24px;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .generate-button:hover {
        background-color: #27ae60;
    }

    .generate-button:active {
        transform: translateY(1px);
    }

    .generate-button:disabled {
        background-color: #95a5a6;
        cursor: not-allowed;
    }

    .button-container {
        margin: 20px 0;
        text-align: center;
    }

    .button-container form {
        display: inline-block;
    }

    .generate-button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .generate-button:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
    }
</style>
{% endblock %}

{% block content %}
<h2>Sequence Display</h2>
<div id="map"></div>

<div class="button-container">
    <form method="POST" enctype="multipart/form-data" action="{% url 'display_points' %}">
        {% csrf_token %}
        <input type="file" name="preplot_file" accept=".p190">
        <button type="submit">Generate 4D Preplot Points</button>
        <div id="loadingIndicator" style="display: none;">
            Processing... Please don't refresh the page
        </div>
    </form>
</div>
<script>
    document.getElementById('preplotForm').addEventListener('submit', function (e) {
        e.preventDefault();
        const formData = new FormData(this);
        const button = document.getElementById('submitButton');
        const loadingIndicator = document.getElementById('loadingIndicator');
        // Disable button and show loading state
        button.disabled = true;
        loadingIndicator.style.display = 'block';
        fetch('{% url "display_points" %}', {
            method: 'POST',
            body: formData,
            headers: {
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
            },
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();  // Controlled reload after success
                } else {
                    alert('Error: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error processing file');
            })
            .finally(() => {
                // Re-enable button and hide loading state
                button.disabled = false;
                loadingIndicator.style.display = 'none';
            });
    });
    // Add warning before page refresh/leave during processing
    window.addEventListener('beforeunload', function (e) {
        if (document.getElementById('loadingIndicator').style.display === 'block') {
            e.preventDefault();
            e.returnValue = 'Processing is ongoing. Are you sure you want to leave?';
            return e.returnValue;
        }
    });
</script>

{% endblock %}

{% block extra_js %}
<link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css" />
<script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script>
    // Initialize the map
    var map = L.map('map');

    // Add the tile layer
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Â© OpenStreetMap contributors'
    }).addTo(map);

    // Create bounds object
    var bounds = L.latLngBounds();

    // Create marker cluster group with custom options
    var markers = L.markerClusterGroup({
        chunkedLoading: true,
        chunkProgress: updateProgressBar,
        maxClusterRadius: 50,
        spiderfyOnMaxZoom: false,
        disableClusteringAtZoom: 16,
        animate: false // Disable animations for better performance
    });

    // Add loading indicator
    var loadingDiv = L.DomUtil.create('div', 'loading-indicator');
    loadingDiv.innerHTML = 'Loading points... <span id="progress">0%</span>';
    document.body.appendChild(loadingDiv);

    function updateProgressBar(processed, total, elapsed) {
        if (processed === total) {
            loadingDiv.style.display = 'none';
        } else {
            let percent = Math.round(processed / total * 100);
            document.getElementById('progress').innerHTML = percent + '%';
        }
    }

    // Process points in batches
    const BATCH_SIZE = 1000;
    let processed = 0;

    function processBatch() {
        let batch = preplotPoints.slice(processed, processed + BATCH_SIZE);

        batch.forEach(function (point) {
            let latlng = [point.latitude, point.longitude];
            bounds.extend(latlng);

            let marker = L.circleMarker(latlng, {
                radius: 2,
                fillColor: 'gray',
                color: '#000',
                weight: 1,
                opacity: 0.6,
                fillOpacity: 0.4
            });

            marker.on('click', function () {
                this.bindPopup(`
                    Line: ${point.preplot}<br>
                    Shot Point: ${point.shotpoint}<br>
                    Source Number: ${point.source_number || 'N/A'}<br>
                    Coordinates: ${point.latitude.toFixed(6)}, ${point.longitude.toFixed(6)}
                `).openPopup();
            });

            markers.addLayer(marker);
        });

        processed += batch.length;

        if (processed < preplotPoints.length) {
            setTimeout(processBatch, 1); // Continue with next batch
        } else {
            // All points processed, fit bounds and add markers
            map.addLayer(markers);
            map.fitBounds(bounds, {
                padding: [50, 50],
                maxZoom: 15
            });
            loadingDiv.style.display = 'none';
        }
    }

    // Start processing points
    if (preplotPoints && preplotPoints.length > 0) {
        processBatch();
    } else {
        map.setView([0, 0], 2); // Default view if no points
    }

    // Add some basic CSS for the loading indicator
    const style = document.createElement('style');
    style.textContent = `
        .loading-indicator {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.5);
            z-index: 1000;
        }
    `;
    document.head.appendChild(style);
</script>
{% endblock %}